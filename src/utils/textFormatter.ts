import type { ChatMessage } from '../types/messages'

/**
 * チャットデータの配列を1つのプレーンテキスト文字列に整形する関数
 * @param chatData - Content Scriptから受け取ったチャットメッセージの配列
 * @returns 整形されたプレーンテキスト文字列
 */
export function formatAsText(chatData: ChatMessage[]): string {
  if (!chatData || chatData.length === 0) {
    return 'No chat messages found.'
  }

  const header = `Gemini Chat Export
Generated on: ${new Date().toLocaleString()}
Total messages: ${chatData.length}

${'='.repeat(50)}

`

  const messagesText = chatData
    .map((message, index) => {
      const timestamp = message.timestamp 
        ? new Date(message.timestamp).toLocaleString()
        : 'Unknown time'
      
      const sender = message.type === 'user' ? 'User' : 'Gemini'
      const divider = message.type === 'user' ? '-'.repeat(20) : '='.repeat(20)
      
      return `[${index + 1}] ${sender} (${timestamp})
${divider}
${message.content.trim()}

`
    })
    .join('\n')

  const footer = `
${'='.repeat(50)}
End of chat export
Generated by Gemini Chat Exporter`

  return header + messagesText + footer
}

/**
 * ファイル名を生成する関数
 * @param prefix - ファイル名のプレフィックス (デフォルト: 'gemini-chat')
 * @returns タイムスタンプ付きのファイル名
 */
export function generateFileName(prefix: string = 'gemini-chat'): string {
  const now = new Date()
  const dateStr = now.toISOString().split('T')[0] // YYYY-MM-DD
  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-') // HH-MM-SS
  
  return `${prefix}_${dateStr}_${timeStr}.txt`
} 
