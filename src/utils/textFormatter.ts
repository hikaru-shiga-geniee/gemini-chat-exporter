import type { ChatMessage } from '../types/messages'

/**
 * チャットデータの配列を1つのMarkdown文字列に整形する関数
 * @param chatData - Content Scriptから受け取ったチャットメッセージの配列
 * @returns 整形されたMarkdown文字列
 */
export function formatAsMarkdown(chatData: ChatMessage[]): string {
  if (!chatData || chatData.length === 0) {
    return '# Gemini Chat Export\n\nNo chat messages found.'
  }

  const header = `# Gemini Chat Export

**Generated on:** ${new Date().toLocaleString()}  
**Total messages:** ${chatData.length}

---

`

  const messagesText = chatData
    .map((message, index) => {
      const timestamp = message.timestamp 
        ? new Date(message.timestamp).toLocaleString()
        : 'Unknown time'
      
      const sender = message.type === 'user' ? '👤 User' : '🤖 Gemini'
      const content = message.content.trim()
      
      return `## [${index + 1}] ${sender}

**Time:** ${timestamp}

${content}

`
    })
    .join('\n')

  const footer = `---

*Generated by Gemini Chat Exporter*`

  return header + messagesText + footer
}

/**
 * 従来のテキスト形式との互換性のために残しておく関数
 * @param chatData - Content Scriptから受け取ったチャットメッセージの配列
 * @returns 整形されたプレーンテキスト文字列
 */
export function formatAsText(chatData: ChatMessage[]): string {
  // Markdownとして出力（後方互換性のため）
  return formatAsMarkdown(chatData)
}

/**
 * Markdownファイル名を生成する関数
 * @param prefix - ファイル名のプレフィックス (デフォルト: 'gemini-chat')
 * @returns タイムスタンプ付きのMarkdownファイル名
 */
export function generateFileName(prefix: string = 'gemini-chat'): string {
  const now = new Date()
  const dateStr = now.toISOString().split('T')[0] // YYYY-MM-DD
  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-') // HH-MM-SS
  
  return `${prefix}_${dateStr}_${timeStr}.md`
} 
